(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{513:function(n,t,e){"use strict";e.r(t),t.default='import { OrbitControl } from "@oasis-engine/controls";\nimport {\n  AmbientLight,\n  Camera,\n  Color,\n  DirectLight,\n  Entity,\n  GLTFResource,\n  Script,\n  SystemInfo,\n  WebGLEngine\n} from "oasis-engine";\n\ninit();\n\n/**\n * Init demo.\n */\nfunction init(): void {\n  // Create engine\n  const engine = new WebGLEngine("o3-demo");\n  engine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\n  engine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\n\n  // Create yellow duck\n  engine.resourceManager\n    .load<GLTFResource>("https://gw.alipayobjects.com/os/OasisHub/267000040/9994/%25E5%25BD%2592%25E6%25A1%25A3.gltf")\n    .then((gltf) => {\n      // Create root entity.\n      const rootEntity = engine.sceneManager.activeScene.createRootEntity();\n\n      // Create camera.\n      const cameraEntity = rootEntity.createChild("CameraEntity");\n      cameraEntity.transform.setPosition(0, 3, 9);\n      cameraEntity.addComponent(Camera);\n      cameraEntity.addComponent(OrbitControl);\n\n      // Create light.\n      const lightEntity = rootEntity.createChild("LightEntity");\n      const ambient = lightEntity.addComponent(AmbientLight);\n      const directLight = lightEntity.addComponent(DirectLight);\n      ambient.color = new Color(0.5, 0.5, 0.5);\n      directLight.color = new Color(0.5, 0.5, 0.5);\n\n      // Create three duck modles, set rotation and position.\n      const duck0 = gltf.defaultSceneRoot;\n      duck0.transform.rotate(0, -45, 0);\n\n      const duck1 = duck0.clone();\n      const duck2 = duck0.clone();\n      duck1.transform.setPosition(-3, 0, 0);\n      duck2.transform.setPosition(3, 0, 0);\n\n      // Create root entity and add transform script.\n      const script = rootEntity.addComponent(TransformScript);\n      script.duck0 = duck0;\n      script.duck1 = duck1;\n      script.duck2 = duck2;\n\n      // Add ducks to scene.\n      rootEntity.addChild(duck0);\n      rootEntity.addChild(duck1);\n      rootEntity.addChild(duck2);\n\n      //Run engine.\n      engine.run();\n    });\n}\n\n/**\n * Script for updating ducks position, rotation, and scale.\n */\nclass TransformScript extends Script {\n  /** Duck0. */\n  duck0: Entity;\n  /** Duck1. */\n  duck1: Entity;\n  /** Duck2. */\n  duck2: Entity;\n\n  private _totalTime: number = 0;\n\n  /**\n   * @override\n   * The main loop, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onUpdate(deltaTime: number): void {\n    this._totalTime += deltaTime;\n    const sinFactor = Math.sin(this._totalTime / 500);\n\n    // Update duck0\'s position.\n    const positionFactor = Math.max(sinFactor, 0);\n    this.duck0.transform.setPosition(0, positionFactor, 0);\n\n    // Update duck1\'s roatation.\n    const rotateFactor = this._totalTime * 0.1;\n    this.duck1.transform.setRotation(0, rotateFactor, 0);\n\n    // Update duck2\'s scale.\n    const scaleFactor = (sinFactor + 1.0) * 0.01;\n    this.duck2.transform.setScale(scaleFactor, scaleFactor, scaleFactor);\n  }\n}\n'}}]);