(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{502:function(n,e,t){"use strict";t.r(e),e.default='import { OrbitControl } from "@oasis-engine/controls";\nimport {\n  AssetType,\n  BlinnPhongMaterial,\n  Camera,\n  DirectLight,\n  Entity,\n  Material,\n  MeshRenderer,\n  ModelMesh,\n  PrimitiveMesh,\n  Script,\n  SystemInfo,\n  Texture2D,\n  Vector3,\n  WebGLEngine\n} from "oasis-engine";\n\ninit();\n\nfunction init(): void {\n  // Create engine\n  const engine = new WebGLEngine("o3-demo");\n  engine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\n  engine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\n\n  // Create root entity\n  const rootEntity = engine.sceneManager.activeScene.createRootEntity();\n\n  // Create camera\n  const cameraEntity = rootEntity.createChild("Camera");\n  cameraEntity.transform.setPosition(0, 0, 20);\n  cameraEntity.addComponent(Camera);\n  cameraEntity.addComponent(OrbitControl);\n\n  // Create direct light\n  const lightEntity = rootEntity.createChild("DirectLight");\n  const light = lightEntity.addComponent(DirectLight);\n  light.intensity = 0.3;\n\n  engine.resourceManager\n    .load<Texture2D>({\n      url: "https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*ArCHTbfVPXUAAAAAAAAAAAAAARQnAQ",\n      type: AssetType.Texture2D\n    })\n    .then((texture) => {\n      const distanceX = 2.5;\n      const distanceY = 2.5;\n      const position = new Vector3();\n\n      // Create material\n      const material = new BlinnPhongMaterial(engine);\n      material.emissiveTexture = texture;\n      material.emissiveColor.setValue(1, 1, 1, 1);\n\n      for (let i = 0; i < 3; i++) {\n        const posX = (i - 1) * distanceX;\n\n        // Create cuboid\n        position.setValue(posX, distanceY * 2.5, 0);\n        generatePrimitiveEntity(rootEntity, "cuboid", position, material, PrimitiveMesh.createCuboid(engine));\n\n        // Create sphere\n        position.setValue(posX, distanceY * 1.5, 0);\n        generatePrimitiveEntity(rootEntity, "sphere", position, material, PrimitiveMesh.createSphere(engine));\n\n        // Create plane\n        position.setValue(posX, distanceY * 0.5, 0);\n        generatePrimitiveEntity(rootEntity, "plane", position, material, PrimitiveMesh.createPlane(engine));\n\n        // Create cylinder\n        position.setValue(posX, -distanceY * 0.5, 0);\n        generatePrimitiveEntity(rootEntity, "cylinder", position, material, PrimitiveMesh.createCylinder(engine));\n\n        // Create cone\n        position.setValue(posX, -distanceY * 1.5, 0);\n        generatePrimitiveEntity(rootEntity, "cone", position, material, PrimitiveMesh.createCone(engine));\n\n        // Create turos\n        position.setValue(posX, -distanceY * 2.5, 0);\n        generatePrimitiveEntity(rootEntity, "torus", position, material, PrimitiveMesh.createTorus(engine));\n      }\n    });\n\n  // Run engine\n  engine.run();\n}\n\n/**\n * generate primitive mesh entity.\n */\nfunction generatePrimitiveEntity(\n  rootEntity: Entity,\n  name: string,\n  position: Vector3,\n  material: Material,\n  mesh: ModelMesh\n): Entity {\n  const entity = rootEntity.createChild(name);\n  entity.transform.setPosition(position.x, position.y, position.z);\n  entity.addComponent(RotateScript);\n  const renderer = entity.addComponent(MeshRenderer);\n  renderer.mesh = mesh;\n  renderer.setMaterial(material);\n\n  return entity;\n}\n\n/**\n * Script for rotate.\n */\nclass RotateScript extends Script {\n  /**\n   * @override\n   * The main loop, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onUpdate(deltaTime: number): void {\n    this.entity.transform.rotate(0.5, 0.6, 0);\n  }\n}\n'}}]);