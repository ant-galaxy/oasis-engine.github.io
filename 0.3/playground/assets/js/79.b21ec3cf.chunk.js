(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{508:function(e,n,t){"use strict";t.r(n),n.default='import { OrbitControl } from "@oasis-engine/controls";\nimport {\n  BlinnPhongMaterial,\n  Camera,\n  Color,\n  MeshRenderer,\n  PrimitiveMesh,\n  Script,\n  SpotLight,\n  SystemInfo,\n  Vector3,\n  WebGLEngine\n} from "oasis-engine";\nconst target = new Vector3(0, -3, 0);\nconst up = new Vector3(0, 1, 0);\n\nclass Move extends Script {\n  time = 0;\n  y = 3;\n  range = 5;\n\n  constructor(node) {\n    super(node);\n  }\n\n  onUpdate(deltaTime) {\n    this.time += deltaTime / 1000;\n    let x = Math.cos(this.time) * this.range;\n    let y = Math.sin(this.time) * this.range * 0.2 + this.y;\n    let z = Math.cos(this.time) * this.range;\n    this.entity.transform.position = new Vector3(x, y, z);\n  }\n}\n\n// \u63a7\u5236 light entity \u59cb\u7ec8\u770b\u5411\u56fa\u5b9a\u70b9\nclass LookAtFocus extends Script {\n  onUpdate(deltaTime) {\n    light1.transform.lookAt(target, up);\n  }\n}\n\n//-- create engine object\nconst engine = new WebGLEngine("o3-demo");\nengine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\nengine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\nconst scene = engine.sceneManager.activeScene;\nconst rootEntity = scene.createRootEntity();\n\n// Logger.enable();\nfunction createCuboidGeometry(name, position, rotation, w, h, d, castShadow: boolean = false) {\n  let obj = rootEntity.createChild(name);\n  obj.position = new Vector3(...position);\n  obj.transform.rotation = new Vector3(rotation[0], rotation[0], rotation[0]);\n  let cubeRenderer = obj.addComponent(MeshRenderer);\n  cubeRenderer.mesh = PrimitiveMesh.createCuboid(rootEntity.engine, w, h, d);\n  cubeRenderer.setMaterial(mtl);\n  cubeRenderer["recieveShadow"] = !castShadow;\n  cubeRenderer["castShadow"] = castShadow;\n}\n\nlet mtl = new BlinnPhongMaterial(engine);\nmtl.baseColor = new Color(0.1, 0.9, 0.8, 1);\n//-- create light entity\nlet lighthouse = rootEntity.createChild("lighthouse");\nlet light1 = lighthouse.createChild("light1");\nlight1.addComponent(Move);\nlight1.addComponent(LookAtFocus);\n\nlet spotLight = light1.addComponent(SpotLight);\nspotLight.angle = Math.PI / 12;\nspotLight.penumbra = 2;\nspotLight["enableShadow"] = true;\nspotLight["shadow"].bias = 0.0001;\nspotLight["shadow"].intensity = 0.2;\n\nlet sphereRenderer3 = light1.addComponent(MeshRenderer);\nsphereRenderer3.mesh = PrimitiveMesh.createSphere(engine, 0.1);\nsphereRenderer3.setMaterial(mtl);\n\n//-- create geometry\ncreateCuboidGeometry("cubiod1", [0, -3, 0], [0, 0, 0], 10, 0.1, 10);\ncreateCuboidGeometry("cubiod2", [5, -2, 0], [0, 0, 0], 0.1, 2, 10);\ncreateCuboidGeometry("cubiod3", [-5, -2, 0], [0, 0, 0], 0.1, 2, 10);\ncreateCuboidGeometry("cubiod4", [0, -2, -5], [0, 0, 0], 10, 2, 0.1);\ncreateCuboidGeometry("cubiod-cast-shadow", [0, -1, 0], [0, 0, 0], 1, 1, 1, true);\n\n//-- create camera\nlet cameraNode = rootEntity.createChild("camera_node");\ncameraNode.transform.position = new Vector3(0, 5, 17);\ncameraNode.transform.lookAt(new Vector3(), new Vector3(0, 1, 0));\ncameraNode.addComponent(Camera);\ncameraNode.addComponent(OrbitControl);\n\n//-- run\nengine.run();\n'}}]);