(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{492:function(n,e,t){"use strict";t.r(e),e.default='import { OrbitControl } from "@oasis-engine/controls";\nimport * as dat from "dat.gui";\nimport {\n  AssetType,\n  BlinnPhongMaterial,\n  Camera,\n  MeshRenderer,\n  PrimitiveMesh,\n  RenderFace,\n  Script,\n  SystemInfo,\n  Texture2D,\n  Vector3,\n  WebGLEngine\n} from "oasis-engine";\n\n// Create engine object\nconst engine = new WebGLEngine("o3-demo");\nengine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\nengine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\n\nconst scene = engine.sceneManager.activeScene;\nconst rootEntity = scene.createRootEntity();\n\n// Create camera\nconst cameraEntity = rootEntity.createChild("Camera");\ncameraEntity.transform.position = new Vector3(0, 0, 20);\ncameraEntity.addComponent(Camera);\ncameraEntity.addComponent(OrbitControl);\n\nengine.run();\n\n// Create plane\nconst mesh = PrimitiveMesh.createPlane(engine, 10, 10);\nconst entity = rootEntity.createChild();\nconst renderer = entity.addComponent(MeshRenderer);\nconst material = new BlinnPhongMaterial(engine);\nmaterial.renderFace = RenderFace.Double;\n\nrenderer.mesh = mesh;\nrenderer.setMaterial(material);\n\n// Load texture\nengine.resourceManager\n  .load<Texture2D>({\n    url: "https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*g8r4S51En90AAAAAAAAAAAAAARQnAQ",\n    type: AssetType.Texture2D\n  })\n  .then((texture) => {\n    texture.anisoLevel = 16;\n    material.emissiveTexture = texture;\n    material.emissiveColor.setValue(1, 1, 1, 1);\n  });\n\n// Debug material\nconst gui = new dat.GUI();\nconst guiDebug = {\n  tilingX: 1,\n  tilingY: 1,\n  offsetX: 0,\n  offsetY: 0,\n  reset: function () {\n    guiDebug.tilingX = 1;\n    guiDebug.tilingY = 1;\n    guiDebug.offsetX = 0;\n    guiDebug.offsetY = 0;\n    material.tilingOffset.setValue(1, 1, 0, 0);\n  },\n  pause: function () {\n    animationScript.enabled = false;\n  },\n  resume: function () {\n    animationScript.enabled = true;\n  }\n};\n\ngui\n  .add(guiDebug, "tilingX", 0, 10)\n  .onChange((value: number) => {\n    material.tilingOffset.x = value;\n  })\n  .listen();\ngui\n  .add(guiDebug, "tilingY", 0, 10)\n  .onChange((value: number) => {\n    material.tilingOffset.y = value;\n  })\n  .listen();\ngui\n  .add(guiDebug, "offsetX", 0, 1)\n  .onChange((value: number) => {\n    material.tilingOffset.z = value;\n  })\n  .listen();\ngui\n  .add(guiDebug, "offsetY", 0, 1)\n  .onChange((value: number) => {\n    material.tilingOffset.w = value;\n  })\n  .listen();\ngui.add(guiDebug, "reset").name("\u91cd\u7f6e");\ngui.add(guiDebug, "pause").name("\u6682\u505c\u52a8\u753b");\ngui.add(guiDebug, "resume").name("\u7ee7\u7eed\u52a8\u753b");\n\nclass AnimateScript extends Script {\n  onUpdate(delta) {\n    material.tilingOffset.x = guiDebug.tilingX = ((guiDebug.tilingX - 1 + delta * 0.001) % 9) + 1;\n    material.tilingOffset.y = guiDebug.tilingY = ((guiDebug.tilingY - 1 + delta * 0.001) % 9) + 1;\n  }\n}\nconst animationScript = rootEntity.addComponent(AnimateScript);\n'}}]);