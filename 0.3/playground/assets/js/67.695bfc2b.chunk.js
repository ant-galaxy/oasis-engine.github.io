(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{496:function(n,e,t){"use strict";t.r(e),e.default='import { OrbitControl } from "@oasis-engine/controls";\nimport * as dat from "dat.gui";\nimport {\n  AssetType,\n  BlinnPhongMaterial,\n  Camera,\n  MeshRenderer,\n  PrimitiveMesh,\n  RenderFace,\n  Script,\n  SystemInfo,\n  Texture2D,\n  Vector3,\n  WebGLEngine\n} from "oasis-engine";\n\ninit();\n\nfunction init(): void {\n  // Create engine object\n  const engine = new WebGLEngine("o3-demo");\n  engine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\n  engine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\n\n  // Load texture\n  engine.resourceManager\n    .load<Texture2D>({\n      url: "https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*Umw_RJGiZLYAAAAAAAAAAAAAARQnAQ",\n      type: AssetType.Texture2D\n    })\n    .then((texture) => {\n      const scene = engine.sceneManager.activeScene;\n      const rootEntity = scene.createRootEntity();\n\n      // Create camera\n      const cameraEntity = rootEntity.createChild("Camera");\n      cameraEntity.transform.position = new Vector3(0, 0, 20);\n      cameraEntity.addComponent(Camera);\n      cameraEntity.addComponent(OrbitControl);\n\n      // Create plane\n      const entity = rootEntity.createChild();\n      const renderer = entity.addComponent(MeshRenderer);\n      const mesh = PrimitiveMesh.createPlane(engine, 10, 10);\n      const material = new BlinnPhongMaterial(engine);\n\n      texture.anisoLevel = 16;\n      material.renderFace = RenderFace.Double;\n      material.emissiveTexture = texture;\n      material.emissiveColor.setValue(1, 1, 1, 1);\n\n      renderer.mesh = mesh;\n      renderer.setMaterial(material);\n\n      // Add animation script\n      const animationScript = rootEntity.addComponent(AnimateScript);\n\n      // Add data GUI\n      const guiData = addDataGUI(material, animationScript);\n      animationScript.guiData = guiData;\n      animationScript.material = material;\n\n      // Run engine\n      engine.run();\n    });\n}\n\n/**\n * Add data GUI.\n */\nfunction addDataGUI(material: BlinnPhongMaterial, animationScript: AnimateScript): any {\n  const gui = new dat.GUI();\n  const guiData = {\n    tilingX: 1,\n    tilingY: 1,\n    offsetX: 0,\n    offsetY: 0,\n    reset: function () {\n      guiData.tilingX = 1;\n      guiData.tilingY = 1;\n      guiData.offsetX = 0;\n      guiData.offsetY = 0;\n      material.tilingOffset.setValue(1, 1, 0, 0);\n    },\n    pause: function () {\n      animationScript.enabled = false;\n    },\n    resume: function () {\n      animationScript.enabled = true;\n    }\n  };\n\n  gui\n    .add(guiData, "tilingX", 0, 10)\n    .onChange((value: number) => {\n      material.tilingOffset.x = value;\n    })\n    .listen();\n  gui\n    .add(guiData, "tilingY", 0, 10)\n    .onChange((value: number) => {\n      material.tilingOffset.y = value;\n    })\n    .listen();\n  gui\n    .add(guiData, "offsetX", 0, 1)\n    .onChange((value: number) => {\n      material.tilingOffset.z = value;\n    })\n    .listen();\n  gui\n    .add(guiData, "offsetY", 0, 1)\n    .onChange((value: number) => {\n      material.tilingOffset.w = value;\n    })\n    .listen();\n  gui.add(guiData, "reset").name("\u91cd\u7f6e");\n  gui.add(guiData, "pause").name("\u6682\u505c\u52a8\u753b");\n  gui.add(guiData, "resume").name("\u7ee7\u7eed\u52a8\u753b");\n\n  return guiData;\n}\n\n/**\n * Animation script.\n */\nclass AnimateScript extends Script {\n  guiData: any;\n  material: BlinnPhongMaterial;\n\n  /**\n   * The main loop, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onUpdate(deltaTime: number): void {\n    const { material, guiData } = this;\n    material.tilingOffset.x = guiData.tilingX = ((guiData.tilingX - 1 + deltaTime * 0.001) % 9) + 1;\n    material.tilingOffset.y = guiData.tilingY = ((guiData.tilingY - 1 + deltaTime * 0.001) % 9) + 1;\n  }\n}\n'}}]);