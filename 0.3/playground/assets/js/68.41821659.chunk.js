(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{497:function(n,e,t){"use strict";t.r(e),e.default='import {\n  AssetType,\n  Camera,\n  Color,\n  Engine,\n  Entity,\n  Material,\n  MeshRenderer,\n  ModelMesh,\n  PrimitiveMesh,\n  Script,\n  Shader,\n  SystemInfo,\n  Texture2D,\n  Vector3,\n  WebGLEngine\n} from "oasis-engine";\n\ninit();\n\nfunction init(): void {\n  // Create engine\n  const engine = new WebGLEngine("o3-demo");\n  engine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\n  engine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\n\n  // Create root entity\n  const rootEntity = engine.sceneManager.activeScene.createRootEntity();\n\n  // Create camera\n  const cameraEntity = rootEntity.createChild("Camera");\n  cameraEntity.transform.setPosition(0, 10, 10);\n  cameraEntity.transform.lookAt(new Vector3(0, 8, 0));\n  const camera = cameraEntity.addComponent(Camera);\n  camera.farClipPlane = 2000;\n  camera.fieldOfView = 55;\n\n  createPlane(engine, rootEntity);\n  engine.run();\n}\n\n/**\n * Create a plane as a child of entity.\n */\nfunction createPlane(engine: Engine, entity: Entity): void {\n  engine.resourceManager\n    .load<Texture2D>({\n      url: "https://gw.alipayobjects.com/mdn/rms_2e421e/afts/img/A*fRtNTKrsq3YAAAAAAAAAAAAAARQnAQ",\n      type: AssetType.Texture2D\n    })\n    .then((texture) => {\n      const planeEntity = entity.createChild("plane");\n      const meshRenderer = planeEntity.addComponent(MeshRenderer);\n      const material = new Material(engine, shader);\n\n      planeEntity.transform.setRotation(-90, 0, 0);\n      meshRenderer.mesh = PrimitiveMesh.createPlane(engine, 1245, 1245, 100, 100, false);\n      meshRenderer.setMaterial(material);\n\n      planeEntity.addComponent(PlaneAnimation);\n\n      const { shaderData } = material;\n      shaderData.setTexture("u_baseColor", texture);\n      shaderData.setColor("u_fogColor", new Color(0.25, 0.25, 0.25, 1));\n      shaderData.setFloat("u_fogDensity", 0.004);\n      shaderData.setColor("u_color", new Color(86 / 255, 182 / 255, 194 / 255, 1));\n    });\n}\n\n/**\n * Plane animation script.\n */\nclass PlaneAnimation extends Script {\n  private _planeMesh: ModelMesh;\n  private _initZ: number[];\n  private _counter: number = 0;\n\n  /**\n   * @override\n   * Called when be enabled first time, only once.\n   */\n  onAwake(): void {\n    const renderer = this.entity.getComponent(MeshRenderer);\n    const mesh = <ModelMesh>renderer.mesh;\n    const { vertexCount } = mesh;\n    const positions = mesh.getPositions();\n    const initZ = new Array<number>(vertexCount);\n\n    for (var i = 0; i < vertexCount; i++) {\n      const position = positions[i];\n      position.z += Math.random() * 10 - 10;\n      initZ[i] = position.z;\n    }\n    this._initZ = initZ;\n    this._planeMesh = mesh;\n  }\n\n  /**\n   * @override\n   * The main loop, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onUpdate(deltaTime: number): void {\n    const mesh = this._planeMesh;\n    let { _counter: counter, _initZ: initZ } = this;\n    const positions = mesh.getPositions();\n    for (let i = 0, n = positions.length; i < n; i++) {\n      const position = positions[i];\n      position.z = Math.sin(i + counter * 0.00002) * (initZ[i] - initZ[i] * 0.6);\n      counter += 0.1;\n    }\n    mesh.setPositions(positions);\n    mesh.uploadData(false);\n    this._counter = counter;\n  }\n}\n\nconst shader = Shader.create(\n  "test-plane",\n  `uniform mat4 u_MVPMat;\n  attribute vec4 POSITION;\n  attribute vec2 TEXCOORD_0;\n  \n  uniform mat4 u_MVMat;\n  \n  varying vec2 v_uv;\n  varying vec3 v_position;\n  \n  void main() {\n    v_uv = TEXCOORD_0;\n    v_position = (u_MVMat * POSITION).xyz;\n    gl_Position = u_MVPMat * POSITION;\n  }`,\n\n  `\n  uniform sampler2D u_baseColor;\n  uniform vec4 u_color;\n  uniform vec4 u_fogColor;\n  uniform float u_fogDensity;\n  \n  varying vec2 v_uv;\n  varying vec3 v_position;\n  \n  void main() {\n    vec4 color = texture2D(u_baseColor, v_uv) * u_color;\n    float fogDistance = length(v_position);\n    float fogAmount = 1. - exp2(-u_fogDensity * u_fogDensity * fogDistance * fogDistance * 1.442695);\n    fogAmount = clamp(fogAmount, 0., 1.);\n    gl_FragColor = mix(color, u_fogColor, fogAmount); \n  }\n  `\n);\n'}}]);