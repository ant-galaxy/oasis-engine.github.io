(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{492:function(e,n,t){"use strict";t.r(n),n.default='import {\n  AmbientLight,\n  BlinnPhongMaterial,\n  Buffer,\n  BufferBindFlag,\n  BufferMesh,\n  BufferUsage,\n  Camera,\n  Color,\n  DirectLight,\n  Engine,\n  IndexFormat,\n  Mesh,\n  MeshRenderer,\n  SystemInfo,\n  Vector3,\n  VertexElement,\n  VertexElementFormat,\n  WebGLEngine\n} from "oasis-engine";\n\n// Create engine and get root entity.\nconst engine = new WebGLEngine("o3-demo");\nconst canvas = engine.canvas;\nconst rootEntity = engine.sceneManager.activeScene.createRootEntity("Root");\ncanvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\ncanvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\n\n// Create light.\nconst lightEntity = rootEntity.createChild("DirectLight");\nconst ambient = lightEntity.addComponent(AmbientLight);\nconst directLight = lightEntity.addComponent(DirectLight);\nambient.color = new Color(0.2, 0.2, 0.2);\ndirectLight.color = new Color(0.3, 0.4, 0.4);\n\n// Create camera.\nconst cameraEntity = rootEntity.createChild("Camera");\ncameraEntity.transform.setPosition(0, 6, 10);\ncameraEntity.transform.lookAt(new Vector3(0, 0, 0));\ncameraEntity.addComponent(Camera);\n\n// Create custom cube.\n// Use createCustomMesh() to create custom cube mesh.\nconst cubeEntity = rootEntity.createChild("Cube");\nconst cubeRenderer = cubeEntity.addComponent(MeshRenderer);\nconst cubeGeometry = createCustomMesh(engine, 1.0);\nconst material = new BlinnPhongMaterial(engine);\ncubeEntity.transform.rotate(0, 60, 0);\ncubeRenderer.mesh = cubeGeometry;\ncubeRenderer.setMaterial(material);\n\n// Run engine.\nengine.run();\n\n/**\n * Create cube geometry with custom BufferGeometry.\n * @param engine - Engine\n * @param size - Cube size\n * @returns Cube mesh\n */\nfunction createCustomMesh(engine: Engine, size: number): Mesh {\n  const geometry = new BufferMesh(engine, "CustomCubeGeometry");\n\n  // prettier-ignore\n  // Create vertices data.\n  const vertices: Float32Array = new Float32Array([\n    \t// Up\n    \t-size, size, -size, 0, 1, 0, size, size, -size, 0, 1, 0, size, size, size, 0, 1, 0, -size, size, size, 0, 1, 0,\n    \t// Down\n    \t-size, -size, -size, 0, -1, 0, size, -size, -size, 0, -1, 0, size, -size, size, 0, -1, 0, -size, -size, size, 0, -1, 0,\n    \t// Left\n    \t-size, size, -size, -1, 0, 0, -size, size, size, -1, 0, 0, -size, -size, size, -1, 0, 0, -size, -size, -size, -1, 0, 0,\n    \t// Right\n    \tsize, size, -size, 1, 0, 0, size, size, size, 1, 0, 0, size, -size, size, 1, 0, 0, size, -size, -size, 1, 0, 0,\n    \t// Front\n    \t-size, size, size, 0, 0, 1, size, size, size, 0, 0, 1, size, -size, size, 0, 0, 1, -size, -size, size, 0, 0, 1,\n    \t// Back\n    \t-size, size, -size, 0, 0, -1, size, size, -size, 0, 0, -1, size, -size, -size, 0, 0, -1, -size, -size, -size, 0, 0, -1]);\n\n  // prettier-ignore\n  // Create indices data.\n  const indices: Uint16Array = new Uint16Array([\n    \t// Up\n    \t0, 2, 1, 2, 0, 3,\n    \t// Down\n    \t4, 6, 7, 6, 4, 5,\n    \t// Left\n    \t8, 10, 9, 10, 8, 11,\n    \t// Right\n    \t12, 14, 15, 14, 12, 13,\n    \t// Front\n    \t16, 18, 17, 18, 16, 19,\n    \t// Back\n    \t20, 22, 23, 22, 20, 21]);\n\n  // Create gpu vertex buffer and index buffer.\n  const vertexBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices, BufferUsage.Static);\n  const indexBuffer = new Buffer(engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Static);\n\n  // Bind buffer\n  geometry.setVertexBufferBinding(vertexBuffer, 24);\n  geometry.setIndexBufferBinding(indexBuffer, IndexFormat.UInt16);\n\n  // Add vertexElement\n  geometry.setVertexElements([\n    new VertexElement("POSITION", 0, VertexElementFormat.Vector3, 0),\n    new VertexElement("NORMAL", 12, VertexElementFormat.Vector3, 0)\n  ]);\n\n  // Add one sub geometry.\n  geometry.addSubMesh(0, indices.length);\n  return geometry;\n}\n'}}]);