(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{512:function(n,e,t){"use strict";t.r(e),e.default='import { OrbitControl } from "@oasis-engine/controls";\nimport {\n  AssetType,\n  Camera,\n  Script,\n  Sprite,\n  SpriteRenderer,\n  SystemInfo,\n  Texture2D,\n  Vector3,\n  WebGLEngine\n} from "oasis-engine";\n\n// Create engine object\nconst engine = new WebGLEngine("o3-demo");\nengine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\nengine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\n\nconst scene = engine.sceneManager.activeScene;\nconst rootEntity = scene.createRootEntity();\n\n// Create camera\nconst cameraEntity = rootEntity.createChild("camera_entity");\ncameraEntity.transform.setPosition(0, 0, 50);\ncameraEntity.addComponent(Camera);\ncameraEntity.addComponent(OrbitControl);\n\n// Create sprite renderer\nengine.resourceManager\n  .load<Texture2D>({\n    url: "https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*ApFPTZSqcMkAAAAAAAAAAAAAARQnAQ",\n    type: AssetType.Texture2D\n  })\n  .then((texture) => {\n    for (let i = 0; i < 10; ++i) {\n      setTimeout(() => {\n        const spriteEntity = rootEntity.createChild(`sprite_${i}`);\n        spriteEntity.transform.position = new Vector3(0, 0, 0);\n        const spriteRenderer = spriteEntity.addComponent(SpriteRenderer);\n        const sprite = new Sprite(engine, texture);\n        spriteRenderer.sprite = sprite;\n        // spriteRenderer.flipX = true;\n        // spriteRenderer.flipY = true;\n        const rect = spriteRenderer.sprite.rect;\n        const scaleX = 100.0 / rect.width;\n        const scaleY = 100.0 / rect.height;\n        spriteEntity.transform.setScale(scaleX, scaleY, 1);\n        spriteEntity.addComponent(SpriteController);\n      }, 2000 * i);\n    }\n  });\n\nengine.run();\n\n// Script for sprite\nclass SpriteController extends Script {\n  static _curRotation: number = 0;\n\n  private _radius: number = 1.5;\n  private _curRadian: number;\n  private _scale: number;\n  private _scaleFlag: boolean;\n\n  onAwake() {\n    this._curRadian = 0;\n    this._radius = 15;\n    this._scale = 0.5;\n    this._scaleFlag = true;\n  }\n\n  onUpdate() {\n    // Update position.\n    this._curRadian += 0.005;\n    const { _radius, _curRadian, entity } = this;\n    const { transform } = entity;\n    const posX = Math.cos(_curRadian) * _radius;\n    const posY = Math.sin(_curRadian) * _radius;\n    transform.setPosition(posX, posY, 0);\n\n    // Update scale.\n    this._scale += this._scaleFlag ? 0.005 : -0.005;\n    const { _scale } = this;\n    transform.setScale(_scale, _scale, _scale);\n    if (this._scale >= 0.6) {\n      this._scaleFlag = false;\n    } else if (this._scale <= 0.4) {\n      this._scaleFlag = true;\n    }\n\n    // Update rotation.\n    SpriteController._curRotation += 0.05;\n    const { _curRotation } = SpriteController;\n    transform.setRotation(0, 0, _curRotation);\n  }\n}\n'}}]);