(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{511:function(e,n,t){"use strict";t.r(n),n.default='import { OrbitControl } from "@oasis-engine/controls";\nimport {\n  AssetType,\n  BlendFactor,\n  BlendOperation,\n  Camera,\n  CullMode,\n  Entity,\n  Material,\n  RenderQueueType,\n  Shader,\n  Sprite,\n  SpriteRenderer,\n  SystemInfo,\n  Texture2D,\n  TextureWrapMode,\n  Vector2,\n  Vector3,\n  WebGLEngine\n} from "oasis-engine";\n\n// Create engine object\nconst engine = new WebGLEngine("o3-demo");\nengine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\nengine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\n\nconst scene = engine.sceneManager.activeScene;\nconst rootEntity = scene.createRootEntity();\n\n// Create camera\nconst cameraEntity = rootEntity.createChild("Camera");\ncameraEntity.transform.position = new Vector3(0, 0, 50);\ncameraEntity.addComponent(Camera);\ncameraEntity.addComponent(OrbitControl);\n\nengine.resourceManager\n  .load<Texture2D>({\n    url: "https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*L2GNRLWn9EAAAAAAAAAAAAAAARQnAQ",\n    type: AssetType.Texture2D\n  })\n  .then((texture) => {\n    // Create origin sprite entity.\n    const texSize = new Vector2(texture.width, texture.height);\n    const spriteEntity = rootEntity.createChild("spriteBlur");\n\n    spriteEntity.addComponent(SpriteRenderer).sprite = new Sprite(engine, texture);\n    spriteEntity.transform.setScale(4, 4, 4);\n    // The blur algorithm will sample the edges of the texture.\n    // Set the clamp warp mode to avoid mis-sampling caused by repeate warp mode.\n    texture.wrapModeU = texture.wrapModeV = TextureWrapMode.Clamp;\n\n    // Display normal\n    addCustomMaterialSpriteEntity(spriteEntity, -22.5, texSize, 0.0);\n    // Display low blur\n    addCustomMaterialSpriteEntity(spriteEntity.clone(), -7.5, texSize, 1.0);\n    // Display moderate blur\n    addCustomMaterialSpriteEntity(spriteEntity.clone(), 7.5, texSize, 2.0);\n    // Display highly blur\n    addCustomMaterialSpriteEntity(spriteEntity.clone(), 22.5, texSize, 3.0);\n  });\n\nengine.run();\n\nfunction addCustomMaterialSpriteEntity(entity: Entity, posX: number, texSize: Vector2, blurSize: number): void {\n  rootEntity.addChild(entity);\n  entity.transform.setPosition(posX, 0, 0);\n  // Create material\n  const material = new Material(engine, Shader.find("SpriteBlur"));\n  entity.getComponent(SpriteRenderer).setMaterial(material);\n  // Init state\n  const target = material.renderState.blendState.targetBlendState;\n  target.enabled = true;\n  target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n  target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n  target.sourceAlphaBlendFactor = BlendFactor.One;\n  target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n  target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n  material.renderState.depthState.writeEnabled = false;\n  material.renderQueueType = RenderQueueType.Transparent;\n  material.renderState.rasterState.cullMode = CullMode.Off;\n  // Set uniform\n  material.shaderData.setVector2("u_texSize", texSize);\n  material.shaderData.setFloat("u_blurSize", blurSize);\n}\n\n// Custom shader\nconst spriteVertShader = `\n  precision highp float;\n\n  uniform mat4 u_VPMat;\n\n  attribute vec3 POSITION;\n  attribute vec2 TEXCOORD_0;\n  attribute vec4 COLOR_0;\n\n  varying vec4 v_color;\n  varying vec2 v_uv;\n\n  void main()\n  {\n    gl_Position = u_VPMat * vec4(POSITION, 1.0);\n    v_color = COLOR_0;\n    v_uv = TEXCOORD_0;\n  }\n`;\n\nconst spriteFragmentShader = `\n  precision mediump float;\n  precision mediump int;\n\n  uniform sampler2D u_texture;\n  uniform float u_blurSize;\n  uniform vec2 u_texSize;\n\n  varying vec2 v_uv;\n  varying vec4 v_color;\n\n  float normpdf(float x, float sigma) {\n    return 0.39894 * exp(-0.5 * x * x / (sigma * sigma)) / sigma;\n  }\n\n  void main() {\n    vec4 color = texture2D(u_texture, v_uv);\n    const int mSize = 11;\n    const int kSize = (mSize - 1) / 2;\n    float kernel[mSize];\n    vec3 final_colour = vec3(0.0);\n\n    // create the 1-D kernel\n    float sigma = 7.0;\n    float Z = 0.0;\n    for (int i = 0; i <= kSize; ++i) {\n      kernel[kSize+i] = kernel[kSize - i] = normpdf(float(i), sigma);\n    }\n\n    // get the normalization factor (as the gaussian has been clamped)\n    for (int i = 0; i < mSize; ++i) {\n      Z += kernel[i];\n    }\n\n    // read out the texels\n    float offsetX = u_blurSize / u_texSize.x;\n    float offsetY = u_blurSize / u_texSize.y;\n    vec2 uv;\n    for (int i = -kSize; i <= kSize; ++i) {\n      for (int j = -kSize; j <= kSize; ++j) {\n        uv = v_uv.xy + vec2(float(i) * offsetX, float(j) * offsetY);\n        final_colour += kernel[kSize + j] * kernel[kSize + i] * texture2D(u_texture, uv).rgb;\n      }\n    }\n\n    gl_FragColor = vec4(final_colour / (Z * Z), color.a) * v_color;\n  }\n`;\n\nShader.create("SpriteBlur", spriteVertShader, spriteFragmentShader);\n'}}]);