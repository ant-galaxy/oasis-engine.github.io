(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{505:function(e,n,t){"use strict";t.r(n),n.default='import { OrbitControl } from "@oasis-engine/controls";\nimport * as dat from "dat.gui";\nimport {\n  AssetType,\n  Camera,\n  Color,\n  Engine,\n  Material,\n  MeshRenderer,\n  PrimitiveMesh,\n  Script,\n  Shader,\n  SystemInfo,\n  Texture2D,\n  Vector3,\n  WebGLEngine\n} from "oasis-engine";\n\nconst gui = new dat.GUI();\n//-- create engine object\nconst engine = new WebGLEngine("o3-demo");\nengine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\nengine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\n\nconst scene = engine.sceneManager.activeScene;\nconst rootEntity = scene.createRootEntity();\n\n//-- create camera\nconst cameraEntity = rootEntity.createChild("camera_entity");\ncameraEntity.transform.position = new Vector3(0, 0, 15);\ncameraEntity.addComponent(Camera);\nconst orbitControl = cameraEntity.addComponent(OrbitControl);\norbitControl.minDistance = 15;\norbitControl.maxDistance = 15;\n\n// \u81ea\u5b9a\u4e49\u6750\u8d28\nconst vertexSource = `\nuniform mat4 u_MVPMat;\nattribute vec3 POSITION;\nattribute vec2 TEXCOORD_0;\nattribute vec3 NORMAL;\n\nvarying vec2 v_uv;\nvarying vec3 v_position;\nvarying vec3 v_normal;\n\n\nuniform float uTime;\n\nuniform sampler2D u_texture;\n\nvoid main() {\n\n  gl_Position = u_MVPMat  *  vec4( POSITION, 1.0 );\n  v_uv = TEXCOORD_0;\n  v_normal = NORMAL;\n  v_position = POSITION;\n}\n `;\n\nconst fragSource = `\nvarying vec2 v_uv;\nvarying vec3 v_position;\nvarying vec3 v_normal;\n\nuniform float u_time;\nuniform sampler2D u_texture;\nuniform vec3 u_cameraPos;\n\n#define EPS 0.001\n#define MAX_ITR 100\n#define MAX_DIS 100.0\n#define PI\t \t  3.141592\n\nuniform float u_water_scale;\nuniform float u_water_speed;\n\nuniform vec3 u_sea_base;\nuniform vec3 u_water_color;\nuniform float u_sea_height;\n\n// Distance Functions\nfloat sd_sph(vec3 p, float r) { return length(p) - r; }\n\n// Distance Map\nfloat map(vec3 p, vec2 sc)\n{    \n    float l = cos(length(p * 2.0));\n    vec2 u = vec2(l, sc.y);\n    vec2 um = u * 0.3;\n    um.x += u_time * 0.1 * u_water_speed;\n    um.y += -u_time * 0.025 * u_water_speed;\n    um.x += (um.y) * 2.0;    \n    float a1 = texture2D(u_texture, (p.yz  *  .4 + um) * u_water_scale).x;\n    float a2 = texture2D(u_texture, (p.zx  *  .4 + um) * u_water_scale).x;\n    float a3 = texture2D(u_texture, (p.xy  *  .4 + um) * u_water_scale).x;\n    \n    float t1 = a1 + a2 + a3;\n    t1 /= 15.0 * u_water_scale;\n    \n    float b1 = texture2D(u_texture, (p.yz  *  1. + u) * u_water_scale).x;\n    float b2 = texture2D(u_texture, (p.zx  *  1. + u) * u_water_scale).x;\n    float b3 = texture2D(u_texture, (p.xy  *  1. + u) * u_water_scale).x;\n    \n    float t2 = b1 + b2 + b3;\n    t2 /= 15.0  *  u_water_scale;\n    \n    float comb = t1 * 0.4 + t2 * 0.1 * (1.0 - t1);\n    \n    return comb + sd_sph(p, 3.); // sd_box(p, vec3(1., 1., 1.)) + sdPlane(p, vec4(0., 0., 1.0, 0.));//\n}\n\nfloat diffuse(vec3 n,vec3 l,float p) {\n    return pow(dot(n,l) * 0.4 + 0.6,p);\n}\n\nfloat specular(vec3 n,vec3 l,vec3 e,float s) {    \n    float nrm = (s + 8.0) / (PI * 8.0);\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\n}\n\n// sky\nvec3 getSkyColor(vec3 e) {\n    e.y = max(e.y,0.0);\n    return vec3(pow(1.0-e.y,2.0), 1.0-e.y, 0.6+(1.0-e.y)*0.4);\n}\n\nvec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {  \n    float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);\n    fresnel = pow(fresnel,3.0) * 0.65;\n\n    vec3 reflected = getSkyColor(reflect(eye,n));    \n    vec3 refracted = u_sea_base + diffuse(normalize(n),l,80.0) * u_water_color * 0.12; \n\n    vec3 color =  mix(refracted,reflected,fresnel);\n\n    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);\n    color += u_water_color * (length(p) - u_sea_height) * 0.18 * atten; // \n\n    color += vec3(specular(n,l,eye,20.0));\n\n    return color;\n}\n\nvoid main (void) {\n\n    vec2 uv = vec2(v_uv.x * 0.5, v_uv.y * 0.5);//  / iResolution.xy;\n    \n    vec3 pos = v_position; \n    vec3 dist = pos - u_cameraPos;\n\n    float dis = EPS;\n    vec3 rayDir = normalize(dist);\n    \n    // Ray marching\n    for(int i = 0; i < MAX_ITR; i++)\n    {\n        if(dis < EPS || dis > MAX_DIS)\n          break;\n        dis = map(pos, uv);\n        pos += dis * rayDir;\n    }\n    \n    if (dis >= EPS) \n    {\n      discard;\n    }\n    \n    vec3 lig = normalize(vec3(-1., -3, -4.5));\n    vec2 eps = vec2(0.0, EPS);\n    vec3 normal = normalize(vec3(\n        map(pos + eps.yxx, uv) - map(pos - eps.yxx, uv),\n        map(pos + eps.xyx, uv) - map(pos - eps.xyx, uv),\n        map(pos + eps.xxy, uv) - map(pos - eps.xxy, uv)\n    ));\n    \n    vec3 col = getSeaColor(pos, normal, lig, rayDir, dist);\n    \n    gl_FragColor = vec4(col,1.0);\n}\n`;\n\n// \u521d\u59cb\u5316 shader\nShader.create("water", vertexSource, fragSource);\n\nclass ShaderMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find("water"));\n\n    this.shaderData.setFloat("u_sea_height", 0.6);\n    this.shaderData.setFloat("u_water_scale", 0.2);\n    this.shaderData.setFloat("u_water_speed", 3.5);\n    this.shaderData.setColor("u_sea_base", new Color(0.1, 0.2, 0.22));\n    this.shaderData.setColor("u_water_color", new Color(0.8, 0.9, 0.6));\n  }\n}\nconst material = new ShaderMaterial(engine);\n\n// \u521b\u5efa\u7403\u4f53\u5f62\u7684\u6d77\u9762\nconst sphereEntity = rootEntity.createChild("sphere");\nconst renderer = sphereEntity.addComponent(MeshRenderer);\nrenderer.mesh = PrimitiveMesh.createSphere(engine, 3, 50);\nrenderer.setMaterial(material);\n\n// \u52a0\u8f7d\u566a\u58f0\u7eb9\u7406\nengine.resourceManager\n  .load({\n    type: AssetType.Texture2D,\n    url: "https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*AC4IQZ6mfCIAAAAAAAAAAAAAARQnAQ"\n  })\n  .then((texture: Texture2D) => {\n    material.shaderData.setTexture("u_texture", texture);\n    engine.run();\n  });\n\n// u_time \u66f4\u65b0\u811a\u672c\nclass WaterScript extends Script {\n  onUpdate() {\n    material.shaderData.setFloat("u_time", engine.time.timeSinceStartup * 0.001);\n  }\n}\nsphereEntity.addComponent(WaterScript);\n\n// debug\nfunction openDebug() {\n  const shaderData = material.shaderData;\n  const baseColor = shaderData.getColor("u_sea_base");\n  const waterColor = shaderData.getColor("u_water_color");\n  const debug = {\n    sea_height: shaderData.getFloat("u_sea_height"),\n    water_scale: shaderData.getFloat("u_water_scale"),\n    water_speed: shaderData.getFloat("u_water_speed"),\n    sea_base: [baseColor.r * 255, baseColor.g * 255, baseColor.b * 255],\n    water_color: [waterColor.r * 255, waterColor.g * 255, waterColor.b * 255]\n  };\n\n  gui.add(debug, "sea_height", 0, 3).onChange((v) => {\n    shaderData.setFloat("u_sea_height", v);\n  });\n  gui.add(debug, "water_scale", 0, 4).onChange((v) => {\n    shaderData.setFloat("u_water_scale", v);\n  });\n  gui.add(debug, "water_speed", 0, 4).onChange((v) => {\n    shaderData.setFloat("u_water_speed", v);\n  });\n  gui.addColor(debug, "sea_base").onChange((v) => {\n    baseColor.r = v[0] / 255;\n    baseColor.g = v[1] / 255;\n    baseColor.b = v[2] / 255;\n  });\n  gui.addColor(debug, "water_color").onChange((v) => {\n    waterColor.r = v[0] / 255;\n    waterColor.g = v[1] / 255;\n    waterColor.b = v[2] / 255;\n  });\n}\n\nopenDebug();\n'}}]);